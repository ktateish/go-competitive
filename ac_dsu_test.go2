package main

// vim:set ft=go:

import (
	"reflect"
	"testing"
)

// vim:set ft=go:

func TestDSU(t *testing.T) {
	N := 5
	dsu := NewDSU(N)
	tests := []struct {
		title    string
		input    []int
		want     [][]int
		wantsize []int
	}{
		{
			title: "0 2",
			input: []int{0, 2},
			want: [][]int{
				[]int{1, 0, 1, 0, 0},
				[]int{0, 1, 0, 0, 0},
				[]int{1, 0, 1, 0, 0},
				[]int{0, 0, 0, 1, 0},
				[]int{0, 0, 0, 0, 1},
			},
			wantsize: []int{2, 1, 2, 1, 1},
		},
		{
			title: "1 3",
			input: []int{1, 3},
			want: [][]int{
				[]int{1, 0, 1, 0, 0},
				[]int{0, 1, 0, 1, 0},
				[]int{1, 0, 1, 0, 0},
				[]int{0, 1, 0, 1, 0},
				[]int{0, 0, 0, 0, 1},
			},
			wantsize: []int{2, 2, 2, 2, 1},
		},
		{
			title: "2 3",
			input: []int{2, 3},
			want: [][]int{
				[]int{1, 1, 1, 1, 0},
				[]int{1, 1, 1, 1, 0},
				[]int{1, 1, 1, 1, 0},
				[]int{1, 1, 1, 1, 0},
				[]int{0, 0, 0, 0, 1},
			},
			wantsize: []int{4, 4, 4, 4, 1},
		},
	}

	for _, ts := range tests {
		t.Run("dsu.Merge:"+ts.title, func(t *testing.T) {
			dsu.Merge(ts.input[0], ts.input[1])
			for i := 0; i < N; i++ {
				for j := 0; j < N; j++ {
					want := ts.want[i][j] == 1
					got := dsu.Same(i, j)
					if want != got {
						t.Errorf("dsu.Merge(%d, %d) failed to connect: want=%v got=%v\n", ts.input[0], ts.input[1], want, got)
					}
				}
				want := ts.wantsize[i]
				got := dsu.Size(i)
				if want != got {
					t.Errorf("dsu.Size(%d) returns wrong value after dsu.Merge(%d, %d): want=%d got=%d\n", i, ts.input[0], ts.input[1], want, got)
				}
			}
		})
	}
}

func checkGraph(G [][]int) ([]int, []int) {
	N := len(G)
	group := make([]int, N)
	size := make([]int, N)

	visited := make([]bool, N)
	var dfs func(g, u int)
	dfs = func(g, u int) {
		visited[u] = true
		group[u] = g
		size[g]++
		for _, v := range G[u] {
			if visited[v] {
				continue
			}
			dfs(g, v)
		}
	}

	for i := 0; i < N; i++ {
		if visited[i] {
			continue
		}
		dfs(i, i)
	}
	for i := range size {
		g := group[i]
		size[i] = size[g]
	}
	return group, size
}

func checkDSU(dsu *DSU) ([]int, []int) {
	N := dsu.Len()
	group := make([]int, N)
	size := make([]int, N)
	for i := range group {
		group[i] = -1
		size[i] = -1
	}
	for i := 0; i < N; i++ {
		l := dsu.Leader(i)
		g := group[l]
		if g == -1 {
			g = i
			group[l] = g
		}
		group[i] = g
		size[i] = dsu.Size(i)
	}
	return group, size
}

func TestDSURandom(t *testing.T) {
	for tt := 0; tt < 100; tt++ {
		N := 20
		dsu := NewDSU(N)
		G := make([][]int, N)
		es := make([][2]int, 0, N*(N-1)/2)
		for i := 0; i < N; i++ {
			for j := i + 1; j < N; j++ {
				es = append(es, [2]int{i, j})
			}
		}
		Shuffle(es)

		for _, e := range es {
			u := e[0]
			v := e[1]

			dsu.Merge(u, v)

			G[u] = append(G[u], v)
			G[v] = append(G[v], u)

			gwant, swant := checkGraph(G)
			ggot, sgot := checkDSU(dsu)

			if !reflect.DeepEqual(gwant, ggot) {
				t.Fatalf("dsu.Merge failed to connect nodes:\n\twant=%v\n\tgot =%v", gwant, ggot)
			}

			if !reflect.DeepEqual(swant, sgot) {
				t.Fatalf("dsu.Merge failed to count size:\n\twant=%v\n\tgot =%v", swant, sgot)
			}
		}
	}
}
