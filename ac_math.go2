package main

// vim:set ft=go:

// This is a port of the AC(AtCoder) Library [1] to Go.
// These logics are based on the ac-library.
// The ac-library is distributed under CC0.
//
// [1] https://github.com/atcoder/ac-library

// snip ------------------------------------------------------------------------

func PowMod[T Integer](x, n T, m int) T {
	assert(0 <= n && 1 <= m)
	if m == 1 {
		return 0
	}
	bt := intl_MakeBarrett(uint32(m))
	var r uint32 = 1
	var y uint32 = uint32(intl_SafeMod(int64(x), ( /*int64*/ int64)(m)))
	for 0 < n {
		if 0 < n&1 {
			r = bt.Mul(r, y)
		}
		y = bt.Mul(y, y)
		n >>= 1
	}
	return T(r)
}

func InvMod[T Integer](x, m T) T {
	assert(1 <= m)
	zFirst, zSecond := intl_InvGCD(int64(x), int64(m))
	assert(zFirst == 1)
	return T(zSecond)
}

func CRT[T Integer](r, m []T) (r0, m0 T) {
	assert(len(r) == len(m))
	n := len(r)
	m0 = 1
	for i := 0; i < n; i++ {
		assert(1 <= m[i])
		r1 := T(intl_SafeMod(int64(r[i]), int64(m[i])))
		m1 := m[i]
		if m0 < m1 {
			r0, r1 = r1, r0
			m0, m1 = m1, m0
		}
		if m0%m1 == 0 {
			if r0%m1 != r1 {
				return 0, 0
			}
			continue
		}
		// assume: m0 > m1, lcm(m0, m1) >= 2 * max(m0, m1)

		// (r0, m0), (r1, m1) -> (r2, m2 = lcm(m0, m1));
		// r2 % m0 = r0
		// r2 % m1 = r1
		// -> (r0 + x*m0) % m1 = r1
		// -> x*u0*g % (u1*g) = (r1 - r0) (u0*g = m0, u1*g = m1)
		// -> x = (r1 - r0) / g * inv(u0) (mod u1)

		// im = inv(u0) (mod u1) (0 <= im < u1)
		g64, im64 := intl_InvGCD(int64(m0), int64(m1))
		g, im := T(g64), T(im64)

		u1 := (m1 / g)
		// |r1 - r0| < (m0 + m1) <= lcm(m0, m1)
		if 0 != (r1-r0)%g {
			return 0, 0
		}

		// u1 * u1 <= m1 * m1 / g / g <= m0 * m1 / g = lcm(m0, m1)
		x := (r1 - r0) / g % u1 * im % u1

		// |r0| + |m0 * x|
		// < m0 + m0 * (u1 - 1)
		// = m0 + m0 * m1 / g - m0
		// = lcm(m0, m1)
		r0 += x * m0
		m0 *= u1 // -> lcm(m0, m1)
		if r0 < 0 {
			r0 += m0
		}
	}
	return r0, m0
}

func FloorSum[T Integer](n, m, a, b T) T {
	var ans T = 0
	if a >= m {
		ans += (n - 1) * n * (a / m) / 2
		a %= m
	}
	if b >= m {
		ans += n * (b / m)
		b %= m
	}

	y_max := (a*n + b) / m
	x_max := (y_max*m - b)
	if y_max == 0 {
		return ans
	}
	ans += (n - (x_max+a-1)/a) * y_max
	ans += FloorSum(y_max, a, m, (a-x_max%a)%a)
	return ans
}
