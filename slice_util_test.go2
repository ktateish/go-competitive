package main

// vim:set ft=go:

import (
	"fmt"
	"testing"
)

func TestSliceBinSearch(t *testing.T) {
	t.Parallel()
	a := []int{2, 4, 6, 8, 10}
	N := len(a)
	tests := []struct {
		input int
		want  int
	}{
		{-1, N},
		{0, N},
		{1, N},
		{2, 0},
		{3, N},
		{4, 1},
		{5, N},
		{6, 2},
		{7, N},
		{8, 3},
		{9, N},
		{10, 4},
		{11, N},
		{12, N},
		{13, N},
	}

	for _, ts := range tests {
		ts := ts
		t.Run(fmt.Sprintf("SliceBinSearch: %d", ts.input), func(t *testing.T) {
			got := SliceBinSearch(a, ts.input, Less[int])
			if ts.want != got {
				t.Errorf("SliceBinSearch(%v, %d, Less[int]) failed: want=%v got=%v\n", a, ts.input, ts.want, got)
			}
		})
	}
}

func TestSliceLowerBound(t *testing.T) {
	t.Parallel()
	a := []int{2, 4, 6, 8, 10}
	tests := []struct {
		input int
		want  int
	}{
		{-1, 0},
		{0, 0},
		{1, 0},
		{2, 0},
		{3, 1},
		{4, 1},
		{5, 2},
		{6, 2},
		{7, 3},
		{8, 3},
		{9, 4},
		{10, 4},
		{11, 5},
		{12, 5},
		{13, 5},
	}

	for _, ts := range tests {
		ts := ts
		t.Run(fmt.Sprintf("SliceLowerBound: %d", ts.input), func(t *testing.T) {
			got := SliceLowerBound(a, ts.input, Less[int])
			if ts.want != got {
				t.Errorf("SliceLowerBound(%v, %d Less[int]) faield: want=%v got=%v\n", a, ts.input, ts.want, got)
			}
		})
	}
}

func TestSliceUpperBound(t *testing.T) {
	t.Parallel()
	a := []int{2, 4, 6, 8, 10}
	tests := []struct {
		input int
		want  int
	}{
		{-1, 0},
		{0, 0},
		{1, 0},
		{2, 1},
		{3, 1},
		{4, 2},
		{5, 2},
		{6, 3},
		{7, 3},
		{8, 4},
		{9, 4},
		{10, 5},
		{11, 5},
		{12, 5},
		{13, 5},
	}

	for _, ts := range tests {
		ts := ts
		t.Run(fmt.Sprintf("SliceUpperBound: %d", ts.input), func(t *testing.T) {
			got := SliceUpperBound(a, ts.input, Less[int])
			if ts.want != got {
				t.Errorf("SliceUpperBound(%v, %d Less[int]) faield: want=%v got=%v\n", a, ts.input, ts.want, got)
			}
		})
	}
}

func TestSliceEqualRange(t *testing.T) {
	t.Parallel()
	a := []int{2, 2, 4, 4, 4, 6, 6, 7}
	tests := []struct {
		input int
		want1 int
		want2 int
	}{
		{-1, 0, 0},
		{0, 0, 0},
		{1, 0, 0},
		{2, 0, 2},
		{3, 2, 2},
		{4, 2, 5},
		{5, 5, 5},
		{6, 5, 7},
		{7, 7, 8},
		{8, 8, 8},
		{9, 8, 8},
	}

	for _, ts := range tests {
		ts := ts
		t.Run(fmt.Sprintf("SliceEqualRange: %d", ts.input), func(t *testing.T) {
			got1, got2 := SliceEqualRange(a, ts.input, Less[int])
			if ts.want1 != got1 || ts.want2 != got2 {
				t.Errorf("SliceEqualRange(%v, %d) returns wrong avlues: want=%v, %v got=%v, %v\n", a, ts.input, ts.want1, ts.want2, got1, got2)
			}
		})
	}
}
