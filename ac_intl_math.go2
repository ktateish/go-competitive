package main

// vim:set ft=go:

// This is a port of the AC(AtCoder) Library [1] to Go.
// These logics are based on the ac-library.
// The ac-library is distributed under CC0.
//
// [1] https://github.com/atcoder/ac-library

// snip ------------------------------------------------------------------------

func intl_SafeMod(x, m int64) int64 {
	x %= m
	if x < 0 {
		x += m
	}
	return x
}

type intl_Barrett struct {
	m  uint32
	im uint64
}

func intl_MakeBarrett(m uint32) intl_Barrett {
	return intl_Barrett{
		m:  m,
		im: (^uint64(0))/uint64(m) + 1,
	}
}

func (bt intl_Barrett) Umod() uint32 {
	return bt.m
}

func (bt intl_Barrett) Mul(a, b uint32) uint32 {
	_m := bt.m
	im := bt.im

	// [1] m = 1
	// a = b = im = 0, so okay

	// [2] m >= 2
	// im = ceil(2^64 / m)
	// -> im * m = 2^64 + r (0 <= r < m)
	// let z = a*b = c*m + d (0 <= c, d < m)
	// a*b * im = (c*m + d) * im = c*(im*m) + d*im = c*2^64 + c*r + d*im
	// c*r + d*im < m * m + m * im < m * m + 2^64 + m <= 2^64 + m * (m + 1) < 2^64 * 2
	// ((ab * im) >> 64) == c or c + 1
	z := uint64(a)
	z *= uint64(b)
	var x uint64
	{
		// simulate: x = (unsigned long long)(((unsigned __int128)(z)*im) >> 64)
		zh := z >> 32
		zl := z & (1<<32 - 1)
		mh := im >> 32
		ml := im & (1<<32 - 1)

		//                    zh     zl
		//    *               mh     ml
		//    -------------------------
		//  x0              [   zl*ml  ]
		//  x1        [  zh*ml  ]
		//  x2        [  zl*mh  ]
		//  x3  [  zh*mh  ]
		x0 := zl * ml
		x1 := zh * ml
		x2 := zl * mh
		x3 := zh * mh
		xcarry := (x0>>32 + x1&(1<<32-1) + x2&(1<<32-1)) >> 32
		x = xcarry + x1>>32 + x2>>32 + x3
	}
	v := uint32(z - x*uint64(_m))
	if _m <= v {
		v += _m
	}
	return v
}

func intl_PowMod(x, n int64, m int32) int64 {
	if m == 1 {
		return 0
	}
	_m := uint64(m)
	r := uint64(1)
	y := uint64(intl_SafeMod(x, int64(m)))
	for 0 < n {
		if 0 < n&1 {
			r = (r * y) % _m
		}
		y = (y * y) % _m
		n >>= 1
	}
	return int64(r)
}

func intl_IsPrime(n int32) bool {
	_n := int64(n)
	if _n <= 1 {
		return false
	}
	if _n == 2 || _n == 7 || _n == 61 {
		return true
	}
	if _n%2 == 0 {
		return false
	}
	d := int64(_n - 1)
	for d%2 == 0 {
		d /= 2
	}
	as := []int64{2, 7, 61}
	for _, a := range as {
		t := d
		y := intl_PowMod(a, t, int32(_n))
		for t != _n-1 && y != 1 && y != _n-1 {
			y = y * y % _n
			t <<= 1
		}
		if y != _n-1 && t%2 == 0 {
			return false
		}
	}
	return true
}

func intl_InvGCD(a, b int64) (g, x int64) {
	a = intl_SafeMod(a, b)
	if a == 0 {
		g = b
		x = 0
		return
	}

	// Contracts:
	// [1] s - m0 * a = 0 (mod b)
	// [2] t - m1 * a = 0 (mod b)
	// [3] s * |m1| + t * |m0| <= b
	s, t := b, a
	m0, m1 := int64(0), int64(1)
	for 0 < t {
		u := s / t
		s -= t * u
		m0 -= m1 * u // |m1 * u| <= |m1| * s <= b

		// [3]:
		// (s - t * u) * |m1| + t * |m0 - m1 * u|
		// <= s * |m1| - t * u * |m1| + t * (|m0| + |m1| * u)
		// = s * |m1| + t * |m0| <= b
		tmp := s
		s = t
		t = tmp
		tmp = m0
		m0 = m1
		m1 = tmp
	}
	// by [3]: |m0| <= b/g
	// by g != b: |m0| < b/g
	if m0 < 0 {
		m0 += b / s
	}
	g = s
	x = m0
	return
}

func PrimitiveRoot(m int32) int32 {
	if m == 2 {
		return 1
	}
	if m == 167772161 {
		return 3
	}
	if m == 469762049 {
		return 3
	}
	if m == 754974721 {
		return 11
	}
	if m == 998244353 {
		return 3
	}
	divs := [20]int32{}
	divs[0] = 2
	cnt := int32(1)
	x := (m - 1) / 2
	for x%2 == 0 {
		x /= 2
	}
	for i := int32(3); int64(i)*int64(i) <= int64(x); i += 2 {
		if x%i == 0 {
			divs[cnt] = i
			cnt++
			for x%i == 0 {
				x /= i
			}
		}
	}
	if x > 1 {
		divs[cnt] = x
		cnt++
	}
	for g := int32(2); ; g++ {
		ok := true
		for i := int32(0); i < cnt; i++ {
			if intl_PowMod(int64(g), int64((m-1)/divs[i]), m) == 1 {
				ok = false
				break
			}
		}
		if ok {
			return g
		}
	}

}
